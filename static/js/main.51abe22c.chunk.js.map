{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","store.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","error","setError","email","setEmail","password","setPassword","newAccount","setNewAccount","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","required","placeholder","onClick","prev","Auth","onClickOtherLogin","event","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","connect","state","userObj","tweet","isEditMode","setIsEditMode","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","fileURL","update","onToggleMode","autoFocus","alt","src","uid","creatorId","faTrash","faPencilAlt","setTweet","attachment","setAttachment","fileRef","ref","child","uuidv4","putString","res","getDownloadURL","tweetObj","createdAt","Date","now","collection","add","maxLength","for","faPlus","accept","file","files","reader","FileReader","onloadend","readFinishEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","data","to","faUser","displayName","createSlice","initialState","reducers","setUserInfo","action","payload","store","createStore","reducer","actions","dispatch","ownProps","setUser","user","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","currentUser","args","class","marginTop","signOut","push","AppRouter","isLoggedIn","exact","path","from","init","setInit","onAuthStateChanged","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51abe22c.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\n\nexport const dbService = firebase.firestore();\n\nexport const storageService = firebase.storage();","import React, {useState} from 'react';\nimport { authService } from 'fbase';\n\nfunction AuthForm() {\n\n    const [error, setError] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [newAccount, setNewAccount] = useState(true);\n    \n    const onToggleAccount = () => setNewAccount(prev => !prev)\n\n    const onChange = (e) => {\n        const {target: {name, value}} = e;\n        if(name === 'email') {\n            setEmail(value);\n        } else if (name === 'password') {\n            setPassword(value);\n        }\n    }\n    const onSubmit = async (e) => {\n        e.preventDefault();\n\n        try {\n            if(newAccount) {\n               await authService.createUserWithEmailAndPassword(email, password);\n            } else {\n               await authService.signInWithEmailAndPassword(email, password);\n            }\n        } catch (error) {\n            setError(error.message);\n        }\n\n    }\n\n    return (\n        <>\n        <form onSubmit={onSubmit} className=\"container\">\n            <input type=\"email\" name=\"email\" required placeholder=\"Email\" value={email} onChange={onChange} className=\"authInput\"/ >\n            <input type=\"password\" name=\"password\" required placeholder=\"Password\" value={password} onChange={onChange} className=\"authInput\"/ >\n            <input type=\"submit\" required value={newAccount ? 'Create Account' : 'Log In'} className=\"authInput authSubmit\"/ >\n            {error && <span className=\"authError\">{error}</span>}\n        </form>\n        <span className=\"authSwitch\" onClick={onToggleAccount}>{newAccount ? 'Log In' : 'Create Account'}</span>\n        </>\n    )\n}\n\nexport default AuthForm;","import AuthForm from 'components/AuthForm';\nimport { authService, firebaseInstance } from 'fbase';\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nfunction Auth() {\n\n    const onClickOtherLogin = async (event) => {\n        const {target: {name}} = event;\n        let provider;\n\n        if (name === 'google') {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === 'github') {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n\n        await authService.signInWithPopup(provider);\n    }\n\n    return (\n    <div className=\"authContainer\">\n        <FontAwesomeIcon\n            icon={faTwitter}\n            color={\"#04AAFF\"}\n            size=\"3x\"\n            style={{ marginBottom: 30 }}\n        />\n        <AuthForm />\n        <div className=\"authBtns\">\n            <button className=\"authBtn\" onClick={onClickOtherLogin} name=\"google\">Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\n            <button className=\"authBtn\" onClick={onClickOtherLogin} name=\"github\">Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\n        </div>\n    </div>)\n    \n};\n\nexport default Auth","import { dbService, storageService } from 'fbase';\nimport React, {useState} from 'react';\nimport {connect} from 'react-redux';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Tweet({userObj, tweet}) {\n    const [isEditMode, setIsEditMode] = useState(false);\n    const [newTweet, setNewTweet] = useState(tweet.text);\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\n        if (ok) {\n            await dbService.doc(`Tweet/${tweet.id}`).delete();\n            await storageService.refFromURL(tweet.fileURL).delete();\n        }\n        \n    }\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        await dbService.doc(`Tweet/${tweet.id}`).update({\n            text: newTweet\n        });\n\n        setIsEditMode(false);\n    }\n    const onChange = (e) => {\n        const {target: {value}} = e;\n        setNewTweet(value);\n    }\n    const onToggleMode = () => setIsEditMode(prev => !prev);\n    return (\n        <>\n        <div className=\"tweet\">\n            {\n                isEditMode ? \n                <>\n                <form onSubmit={onSubmit} className=\"container tweetEdit\">\n                    <input type=\"text\" onChange={onChange} value={newTweet} autoFocus className=\"formInput\"/>\n                    <input type=\"submit\" value=\"Apply\" className=\"formBtn\"/>\n                    <span onClick={onToggleMode} className=\"formBtn cancelBtn\">Cancel</span>\n                </form>\n                </>\n                :\n                <>\n                <h4>{tweet.text}</h4>\n                {\n                    tweet.fileURL && <img alt=\"tempFile\" src={tweet.fileURL} />\n                }\n                { (userObj.uid === tweet.creatorId) ?\n                    <div className=\"tweet__actions\">\n                        <span onClick={onDeleteClick}>\n                            <FontAwesomeIcon icon={faTrash} />\n                        </span>\n                        <span onClick={onToggleMode}>\n                            <FontAwesomeIcon icon={faPencilAlt} />\n                        </span>\n                    </div>\n                    : <></>\n                }\n                </>\n        }\n        </div>\n        </>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {userObj: state.userObj};\n  }\n\nexport default connect(mapStateToProps)(Tweet)","import React, {useState} from 'react';\nimport {connect} from 'react-redux';\nimport {dbService, storageService} from 'fbase';\nimport {v4 as uuidv4} from 'uuid';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction TweetFactory ({userObj}) {\n    const [tweet, setTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n    const onSubmit = async (e) => {\n        if (tweet === '') {\n            return;\n        }\n        e.preventDefault();\n        let fileURL = '';\n        if (attachment !== '') {\n            const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const res = await fileRef.putString(attachment, 'data_url');\n            fileURL = await res.ref.getDownloadURL();\n        }\n        const tweetObj = {\n            text: tweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            fileURL\n        }\n\n        await dbService.collection('Tweet').add(tweetObj);\n        setTweet('');\n        setAttachment('');\n    }\n\n    const onChangeTweet = (e) => {\n        const {target: {value}} = e;\n        setTweet(value);\n    }\n\n    const onFileChange = (e) => {\n        const {target: {files}} = e;\n\n        const file = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (readFinishEvent) => {\n            const {currentTarget: {result}} = readFinishEvent;\n            setAttachment(result);\n        }\n\n        reader.readAsDataURL(file);\n    }\n\n    const onClearAttachment = () => setAttachment('');\n\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input className=\"factoryInput__input\" value={tweet} onChange={onChangeTweet} type=\"text\" placeholder=\"What's on your mind?\" maxLength={120}/>\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n            <label for=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={onFileChange} style={{opacity: 0}}/>\n\n            {\n                attachment && \n                <div className=\"factoryForm__attachment\">\n                    <img alt=\"attachment\" src={attachment} style={{backgroundImage: attachment}}/>\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n            }\n        </form>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {userObj: state.userObj};\n}\n\nexport default connect(mapStateToProps)(TweetFactory);","import React, {useState, useEffect} from 'react';\nimport Tweet from 'components/Tweet';\nimport { dbService } from 'fbase';\nimport TweetFactory from 'components/TweetFactory';\n\n\nfunction Home() {\n    const [tweets, setTweets] = useState([]);\n    \n    // 기존에 많이 사용되던 방식\n    /* const getTweets = async () => {\n        const result = await dbService.collection(\"Tweet\").get();\n        result.forEach(document => {\n            const tweetObj = {\n                ...document.data(),\n                id: document.id\n            }\n            setTweets((prev) => [tweetObj, ...prev])\n        })\n    } */\n\n    useEffect(() => {\n        // 실시간으로 데이터베이스의 변경을 적용시킴!!\n        dbService.collection(\"Tweet\").onSnapshot(snapshot => {\n            const tweetArray = snapshot.docs.map(doc => ({id: doc.id, ...doc.data()}))\n            setTweets(tweetArray);\n        })\n    }, []);\n\n\n    \n\n    return (\n        <div className=\"container\">\n            <TweetFactory />\n            <div className=\"tweet-list\">\n                {tweets.map((tweet) => (\n                    <Tweet tweet={tweet} key={tweet.id} />\n                ))}\n            </div>\n        </div>   \n    )\n}\nexport default Home;\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Navigation({userObj}) {\n    return (\n        <>\n            <nav>\n                <ul className=\"navigation-ul\">\n                    <li><Link className=\"navigation-link\" to=\"/\"><FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" /></Link></li>\n                    <li><Link className=\"navigation-link link-profile\" to=\"/profile\"><FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" /><span>{userObj.displayName ? `${userObj.displayName}'s Profile` : 'Profile'}</span></Link></li>\n                </ul>\n            </nav>\n        </>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {userObj: state.userObj};\n  }\n\nexport default connect(mapStateToProps)(Navigation)","import {createSlice} from '@reduxjs/toolkit';\nimport {createStore} from 'redux';\n\n\nconst defaultState = {\n    userObj: null\n}\n\n\nconst tweets = createSlice({\n    name: \"TweetsReducer\",\n    initialState: defaultState,\n    reducers: {\n        setUserInfo: (state, action) => {\n            // const newState = {...state};\n            state.userObj = action.payload;\n            // return newState;\n        }\n    }\n})\n\nconst store = createStore(tweets.reducer);\n\nexport const { setUserInfo } = tweets.actions;\nexport default store;","import React, { useState} from 'react';\nimport { useHistory } from 'react-router';\nimport {connect} from 'react-redux';\nimport { authService } from 'fbase';\nimport {setUserInfo} from 'store';\n\nfunction Profile({userObj, setUser}) {\n\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const history = useHistory();\n    const onClickLogout = () => {\n        authService.signOut();\n        history.push('/');\n    }\n    // const getMyTweets = async () => {\n    //     const tweets = await dbService.collection('Tweet').where('creatorId', '==', userObj.uid).orderBy('createdAt', 'desc').get();\n    //     const myTweets = tweets.docs.map(doc => doc.data());\n    //     console.log(myTweets);\n    // }\n\n    const onDisplayNameChange = (e) => {\n        const {target: {value}} = e;\n        setNewDisplayName(value);\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        if(userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({\n                displayName: newDisplayName\n            });\n            \n            const user = authService.currentUser;\n            setUser({\n                uid: user.uid,\n                displayName: user.displayName,\n                updateProfile: (args) => user.updateProfile(args)\n            });\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} class=\"profileForm\">\n                <input type=\"text\" autoFocus placeholder=\"Display Name\" value={newDisplayName} onChange={onDisplayNameChange} className=\"formInput\" />\n                <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{marginTop: 10}}/>\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onClickLogout}>Log out</span>\n        </div>\n    )\n}\nfunction mapStateToProps(state) {\n    return {userObj: state.userObj};\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        setUser: (user) => dispatch(setUserInfo(user))\n    }\n}\n  \n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile)","import React from 'react';\nimport {HashRouter as Router, Redirect, Route, Switch} from 'react-router-dom'; \nimport Auth from '../routes/Auth';\nimport Home from '../routes/Home';\nimport Navigation from 'components/Navigation';\nimport Profile from 'routes/Profile';\n\n\nconst AppRouter = ({isLoggedIn}) => {\n\n    return (\n        <Router>\n            {isLoggedIn && <Navigation />}\n            <Switch>\n                {isLoggedIn ? \n                <div className=\"router-container\">\n                <Route exact path=\"/\">\n                    <Home/> \n                </Route> \n                <Route exact path=\"/profile\">\n                    <Profile /> \n                </Route> \n                <Redirect from=\"*\" to=\"/\"></Redirect>\n                </div> \n                :\n                <>\n                <Route exact path=\"/\"><Auth /></Route>\n                <Redirect from=\"*\" to=\"/\"></Redirect>\n                </>\n            }\n            </Switch>\n        </Router>\n    )\n}\n\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport {authService} from 'fbase';\nimport {setUserInfo} from 'store';\nimport {connect} from 'react-redux';\n\n\nfunction App({setUser, userObj}) {\n  const [init, setInit] = useState(false);\n\n  useEffect(() => {\n    authService.onAuthStateChanged(user => {\n      if(user) {\n        setUser({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUser(null);\n      }\n      setInit(true);\n    })\n  }, [])\n\n  return (\n    <>\n      {init ? <AppRouter isLoggedIn={Boolean(userObj)} /> : 'Loading...'}\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {userObj: state.userObj};\n}\n\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return {\n      setUser: (user) => dispatch(setUserInfo(user))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport App from 'components/App';\nimport store from './store';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}